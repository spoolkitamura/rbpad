<menubar_action>

<branch id="statement" desc="基本構文(_I)" />

<branch id="cond"      desc="場合わけ" />

<item   id="if"        desc="もし～ならば (if)" acckey="">
if !条件!
  # 
end
</item>

<item   id="if_else"   desc="もし～ならば、そうでなければ (if～else)" acckey="">
if !条件!
  # 
else
  # 
end
</item>

<item   id="if_elsif_else"   desc="もし～ならば、そうでなく～ならば、そうでなければ (if～elsif～else)" acckey="">
if !条件!
  # 
elsif !条件!
  # 
else
  # 
end
</item>

<branch id="loop"  desc="繰り返し" />

<item id="times"  desc="xx回くりかえす (回数.times)" acckey="">
!回数!.times do |i|
  # 
  puts "#{i}"
end
</item>

<item id="while"  desc="～の間くりかえす (while 条件)"  acckey="">
while !条件!
  # 
end
</item>

<item id="until"  desc="～になるまでくりかえす (until 条件)" acckey="">
until !条件!
  # 
end
</item>

<item id="a_each"        desc="配列の中身についてくりかえす (配列.each)" acckey="&lt;shift&gt;&lt;control&gt;E">
!配列!.each do |x|
  # 
  puts "#{x}"
end
</item>

<item id="a_each_with"   desc="配列の中身について番号付きでくりかえす (配列.each__with__index)" acckey="">
!配列!.each_with_index do |x, i|
  # 
  puts "#{i}: #{x}"
end
</item>

<item id="h_each"        desc="ハッシュの中身のキーと値についてくりかえす (ハッシュ.each)" acckey="">
!ハッシュ!.each do |k, v|
  # 
  puts "#{k}: #{v}"
end
</item>

<item id="h_each_key"    desc="ハッシュの中身のキーについてくりかえす (ハッシュ.each__key)" acckey="">
!ハッシュ!.each_key do |k|
  # 
  puts "#{k}"
end
</item>

<item id="h_each_value"  desc="ハッシュの中身の値についてくりかえす (ハッシュ.each__value)" acckey="">
!ハッシュ!.each_value do |v|
  # 
  puts "#{v}"
end
</item>

<branch id="routine"       desc="ルーチンワーク" />

<item id="def"           desc="メソッドをつくる (def)" acckey="">
def !メソッド名!
  # 
end
</item>

<item id="module"        desc="モジュールをつくる (module)" acckey="">
module !モジュール名!
  # 
  def !メソッド名!
    # 
  end
end
</item>

<item id="class"         desc="クラスをつくる (class)" acckey="">
class !クラス名!
  # 初期化
  def initialize
    # 
  end
  # 
  def !メソッド名!
    # 
  end
end
</item>

<branch id="data"          desc="データの管理" />

<item id="var"           desc="変数 (v = nil)" acckey="">
v = nil
</item>

<item id="array"         desc="配列 (v = [ ])" acckey="">
v = [10, 20, 30]
p v
</item>

<item id="array_2d"       desc="２次元配列 (v = [ [ ], [ ], [ ] ])" acckey="">
v = [ [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9] ]
p v
</item>

<item id="hash"          desc="ハッシュ (v = { })" acckey="">
v = {:x => 10, :y => 20, :z => 30}
p v
</item>

<item id="file_read"     desc="ファイルから読みこむ (File.open(&quot;rb&quot;))" acckey="">
File.open("!ファイル名!", "rb") do |f|
  f.each_line do |line|
    puts line
  end
end
</item>

<item id="file_write"    desc="ファイルに書きこむ   (File.open(&quot;wb&quot;))" acckey="">
File.open("!ファイル名!", "wb") do |f|
  f.puts "data 1"
  f.puts "data 2"
  f.puts "data 3"
end
</item>


<branch id="dxruby" desc="DXRuby(_G)" />

<template id="dxruby_template1"      desc="DXRubyテンプレート(基本)"                                acckey="">
dxruby_template1.rb
</template>

<template id="dxruby_template2"      desc="DXRubyテンプレート(シーンクラス)"                        acckey="">
dxruby_template2.rb
</template>

<item id="window_draw_font"          desc="文字を表示する             (Window.draw__font)"          acckey="">
Window.draw_font(100, 100, "Hello, Ruby", Font.default, {:color => C_YELLOW})
</item>

<item id="window_draw_box_fill"      desc="四角形を描いて塗りつぶす (Window.draw__box__fill)"       acckey="">
Window.draw_box_fill(100, 150, 250, 180, C_RED)
</item>

<item id="window_draw_circle_fill"   desc="円を描いて塗りつぶす       (Window.draw__circle__fill)"  acckey="">
Window.draw_circle_fill(300, 165, 15, C_RED)
</item>

<item id="window_draw"               desc="画像を表示する             (Window.draw)"                acckey="">
Window.draw(0, 20, Image.load("!画像ファイル名!"))
</item>

<item id="sprite_new"                desc="スプライトを作成して表示する (Sprite.new / Sprite.draw)" acckey="">
s = Sprite.new(400, 100, Image.new(50, 50, C_GREEN))
s.draw
</item>

<item id="sprite_collision"          desc="スプライトの衝突判定をする   (===)"                      acckey="">
if s === ss
  # 
end
</item>

<item id="input_xy"                  desc="カーソルキーで値を変化させる (Input.x / Input.y)"        acckey="">
x = x + Input.x
y = y + Input.y
</item>

</menubar_action>
