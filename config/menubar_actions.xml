<menubar_action>

<branch id="m_0"  desc="基本構文(_I)" valid="t" />

<branch id="m_0:0"  desc="場合わけ" valid="t" />

<item id="mi_0:0:0" desc="もし～ならば (if)" acckey=""  valid="t">
if !条件!
  # 
end
</item>

<item id="mi_0:0:1" desc="もし～ならば、そうでなければ (if～else)" acckey=""  valid="t">
if !条件!
  # 
else
  # 
end
</item>

<item id="mi_0:0:2" desc="もし～ならば、そうでなく～ならば、そうでなければ (if～elsif～else)" acckey=""  valid="t">
if !条件!
  # 
elsif !条件!
  # 
else
  # 
end
</item>

<branch id="m_0:1"  desc="繰り返し" valid="t" />

<item id="mi_0:1:0" desc="xx回くりかえす (回数.times)" acckey=""  valid="t">
!回数!.times do |i|
  # 
  puts "#{i}"
end
</item>

<item id="mi_0:1:1" desc="～の間くりかえす (while 条件)" acckey=""  valid="t">
while !条件!
  # 
end
</item>

<item id="mi_0:1:2" desc="～になるまでくりかえす (until 条件)" acckey=""  valid="t">
until !条件!
  # 
end
</item>

<item id="mi_0:1:4" desc="配列の中身についてくりかえす (配列.each)" acckey="&lt;shift&gt;&lt;control&gt;E"  valid="t">
!配列!.each do |x|
  # 
  puts "#{x}"
end
</item>

<item id="mi_0:1:5" desc="配列の中身について番号付きでくりかえす (配列.each__with__index)" acckey=""  valid="t">
!配列!.each_with_index do |x, i|
  # 
  puts "#{i}: #{x}"
end
</item>

<item id="mi_0:1:7" desc="ハッシュの中身のキーと値についてくりかえす (ハッシュ.each)" acckey=""  valid="t">
!ハッシュ!.each do |k, v|
  # 
  puts "#{k}: #{v}"
end
</item>

<item id="mi_0:1:8" desc="ハッシュの中身のキーについてくりかえす (ハッシュ.each__key)" acckey=""  valid="t">
!ハッシュ!.each_key do |k|
  # 
  puts "#{k}"
end
</item>

<item id="mi_0:1:9" desc="ハッシュの中身の値についてくりかえす (ハッシュ.each__value)" acckey=""  valid="t">
!ハッシュ!.each_value do |v|
  # 
  puts "#{v}"
end
</item>

<branch id="m_0:2"  desc="ルーチンワーク" valid="t" />

<item id="mi_0:2:0" desc="メソッドをつくる (def)" acckey=""  valid="t">
def !メソッド名!
  # 
end
</item>

<item id="mi_0:2:1" desc="モジュールをつくる (module)" acckey=""  valid="t">
module !モジュール名!
  # 
  def !メソッド名!
    # 
  end
end
</item>

<item id="mi_0:2:2" desc="クラスをつくる (class)" acckey=""  valid="t">
class !クラス名!
  # 初期化
  def initialize
    # 
  end
  # 
  def !メソッド名!
    # 
  end
end
</item>

<branch id="m_0:4"  desc="データの管理" valid="t" />

<item id="mi_0:4:0" desc="変数 (v = nil)" acckey=""  valid="t">
v = nil
</item>

<item id="mi_0:4:1" desc="配列 (v = [ ])" acckey=""  valid="t">
v = [10, 20, 30]
p v
</item>

<item id="mi_0:4:2" desc="２次元配列 (v = [ [ ], [ ], [ ] ])" acckey=""  valid="t">
v = [ [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9] ]
p v
</item>

<item id="mi_0:4:3" desc="ハッシュ (v = { })" acckey=""  valid="t">
v = {:x =&gt; 10, :y =&gt; 20, :z =&gt; 30}
p v
</item>

<item id="mi_0:4:5" desc="ファイルから読みこむ (File.open(&quot;rb&quot;))" acckey=""  valid="t">
File.open("!ファイル名!", "rb") do |f|
  f.each_line do |line|
    puts line
  end
end
</item>

<item id="mi_0:4:6" desc="ファイルに書きこむ   (File.open(&quot;wb&quot;))" acckey=""  valid="t">
File.open("!ファイル名!", "wb") do |f|
  f.puts "data 1"
  f.puts "data 2"
  f.puts "data 3"
end
</item>

<branch id="m_1"  desc="DXRuby(_G)" valid="t" />

<template id="mi_1:0" desc="DXRubyテンプレート(基本)" acckey=""  valid="t">
require 'dxruby'

# 初期化
Window.caption = 'DXRuby Application'
Window.width   = 640
Window.height  = 480
Window.bgcolor = C_BLACK
Window.x       = 260
Window.y       = 240

# 描画ループ
Window.loop do
  break if Input.key_release?(K_ESCAPE)
end

</template>

<template id="mi_1:1" desc="DXRubyテンプレート(シーンクラス)" acckey=""  valid="t">
require 'dxruby'

# シーン(場面)クラス
class Scene

  # 初期化
  def initialize
    Window.caption = 'DXRuby Application'
    Window.width   = 640
    Window.height  = 480
    Window.bgcolor = C_BLACK
    Window.x       = 260
    Window.y       = 240
  end

  # 描画ループ
  def draw
    Window.loop do
      break if Input.key_release?(K_ESCAPE)
    end
  end

end


# シーンを作成して描画
scene = Scene.new
scene.draw

</template>

<item id="mi_1:3" desc="文字を表示する             (Window.draw__font)" acckey=""  valid="t">
Window.draw_font(100, 100, "Hello, Ruby", Font.default, {:color =&gt; C_YELLOW})
</item>

<item id="mi_1:4" desc="四角形を描いて塗りつぶす (Window.draw__box__fill)" acckey=""  valid="t">
Window.draw_box_fill(100, 150, 250, 180, C_RED)
</item>

<item id="mi_1:5" desc="円を描いて塗りつぶす       (Window.draw__circle__fill)" acckey=""  valid="t">
Window.draw_circle_fill(300, 165, 15, C_RED)
</item>

<item id="mi_1:6" desc="画像を表示する             (Window.draw)" acckey=""  valid="t">
Window.draw(0, 20, Image.load("!画像ファイル名!"))
</item>

<item id="mi_1:8" desc="スプライトを作成して表示する (Sprite.new / Sprite.draw)" acckey=""  valid="t">
s = Sprite.new(400, 100, Image.new(50, 50, C_GREEN))
s.draw
</item>

<item id="mi_1:9" desc="スプライトの衝突判定をする   (===)" acckey=""  valid="t">
if s === ss
  # 
end
</item>

<item id="mi_1:11" desc="カーソルキーで値を変化させる (Input.x / Input.y)" acckey=""  valid="t">
x = x + Input.x
y = y + Input.y
</item>

</menubar_action>
